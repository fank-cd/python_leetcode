# coding:utf-8

# 统计所有小于非负整数 n 的质数的数量。
#
# 示例:
#
# 输入: 10
# 输出: 4
# 解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。

# 题意简单明了，但是做法真的很多就是了，这里借用了评论区的代码

# 这题搜到一个非常牛逼的算法,叫做厄拉多塞筛法. 比如说求20以内质数的个数,首先0,1不是质数.2是第一个质数,
# 然后把20以内所有2的倍数划去.2后面紧跟的数即为下一个质数3,然后把3所有的倍数划去.
# 3后面紧跟的数即为下一个质数5,再把5所有的倍数划去.以此类推.
#
# 代码的实现上用了非常好的技巧:


# 比较不容易想到的是i的取值范围，为什么可以到**0.5就可以了，
# 另外就是切片的写法，也是不容易想到的。。


class Solution(object):

    def countPrimes(self, n):
        if n < 3:
            return 0
        prime = [1] * n
        prime[0] = prime[1] = 0
        for i in range(2, int(n ** 0.5) + 1):
            if prime[i] == 1:
                prime[i * i:n:i] = [0] * len(prime[i * i:n:i])
        return sum(prime)
